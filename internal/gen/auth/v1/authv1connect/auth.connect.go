// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/endo-checker/auth/internal/gen/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	// adding user to auth0.
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error)
	// logs a user in
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error)
	// gets a user from auth0
	GetAccount(context.Context, *connect_go.Request[v1.GetAccountRequest]) (*connect_go.Response[v1.GetAccountResponse], error)
	// updates a user in auth0
	UpdateAccount(context.Context, *connect_go.Request[v1.UpdateAccountRequest]) (*connect_go.Response[v1.UpdateAccountResponse], error)
	// signs a user out
	SignOut(context.Context, *connect_go.Request[v1.SignOutRequest]) (*connect_go.Response[v1.SignOutResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		createAccount: connect_go.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/CreateAccount",
			opts...,
		),
		signIn: connect_go.NewClient[v1.SignInRequest, v1.SignInResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/SignIn",
			opts...,
		),
		getAccount: connect_go.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/GetAccount",
			opts...,
		),
		updateAccount: connect_go.NewClient[v1.UpdateAccountRequest, v1.UpdateAccountResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/UpdateAccount",
			opts...,
		),
		signOut: connect_go.NewClient[v1.SignOutRequest, v1.SignOutResponse](
			httpClient,
			baseURL+"/auth.v1.AuthService/SignOut",
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	createAccount *connect_go.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	signIn        *connect_go.Client[v1.SignInRequest, v1.SignInResponse]
	getAccount    *connect_go.Client[v1.GetAccountRequest, v1.GetAccountResponse]
	updateAccount *connect_go.Client[v1.UpdateAccountRequest, v1.UpdateAccountResponse]
	signOut       *connect_go.Client[v1.SignOutRequest, v1.SignOutResponse]
}

// CreateAccount calls auth.v1.AuthService.CreateAccount.
func (c *authServiceClient) CreateAccount(ctx context.Context, req *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// SignIn calls auth.v1.AuthService.SignIn.
func (c *authServiceClient) SignIn(ctx context.Context, req *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// GetAccount calls auth.v1.AuthService.GetAccount.
func (c *authServiceClient) GetAccount(ctx context.Context, req *connect_go.Request[v1.GetAccountRequest]) (*connect_go.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// UpdateAccount calls auth.v1.AuthService.UpdateAccount.
func (c *authServiceClient) UpdateAccount(ctx context.Context, req *connect_go.Request[v1.UpdateAccountRequest]) (*connect_go.Response[v1.UpdateAccountResponse], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// SignOut calls auth.v1.AuthService.SignOut.
func (c *authServiceClient) SignOut(ctx context.Context, req *connect_go.Request[v1.SignOutRequest]) (*connect_go.Response[v1.SignOutResponse], error) {
	return c.signOut.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	// adding user to auth0.
	CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error)
	// logs a user in
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error)
	// gets a user from auth0
	GetAccount(context.Context, *connect_go.Request[v1.GetAccountRequest]) (*connect_go.Response[v1.GetAccountResponse], error)
	// updates a user in auth0
	UpdateAccount(context.Context, *connect_go.Request[v1.UpdateAccountRequest]) (*connect_go.Response[v1.UpdateAccountResponse], error)
	// signs a user out
	SignOut(context.Context, *connect_go.Request[v1.SignOutRequest]) (*connect_go.Response[v1.SignOutResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/auth.v1.AuthService/CreateAccount", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/CreateAccount",
		svc.CreateAccount,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/SignIn", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/SignIn",
		svc.SignIn,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/GetAccount", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/GetAccount",
		svc.GetAccount,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/UpdateAccount", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/UpdateAccount",
		svc.UpdateAccount,
		opts...,
	))
	mux.Handle("/auth.v1.AuthService/SignOut", connect_go.NewUnaryHandler(
		"/auth.v1.AuthService/SignOut",
		svc.SignOut,
		opts...,
	))
	return "/auth.v1.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) CreateAccount(context.Context, *connect_go.Request[v1.CreateAccountRequest]) (*connect_go.Response[v1.CreateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.CreateAccount is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.SignIn is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetAccount(context.Context, *connect_go.Request[v1.GetAccountRequest]) (*connect_go.Response[v1.GetAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.GetAccount is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateAccount(context.Context, *connect_go.Request[v1.UpdateAccountRequest]) (*connect_go.Response[v1.UpdateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.UpdateAccount is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignOut(context.Context, *connect_go.Request[v1.SignOutRequest]) (*connect_go.Response[v1.SignOutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.SignOut is not implemented"))
}
